import sqlite3
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio


# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

# cursor.execute("""
# CREATE TABLE IF NOT EXISTS users (
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     user_id INTEGER UNIQUE,
#     username TEXT,
#     status TEXT
#
# )
# """)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def add_user(user_id, username, status = "0"):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (user_id, username, status) VALUES (?, ?, ?)",
                       (user_id, username, status))
        conn.commit()
    except sqlite3.IntegrityError:
        pass  # –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
    finally:
        conn.close()


def update_user_status(user_id, new_status):
    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", (new_status, user_id))
        conn.commit()
        conn.close()

    except Exception as e:
        print(e)

    finally:
        conn.close()


def get_all_users():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, status FROM users")
    users = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    user_list = []

    for user in users:
        message: str = f"""
        –ê–π–¥–∏: {user[0]} \n
        Username: {user[1]} \n
        –ë–ª–æ–∫: {user[2]}
        """


        user_list.append(message)

    conn.close()
    return user_list